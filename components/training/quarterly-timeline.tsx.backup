"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Calendar, Users, X, Info, GripVertical, AlertTriangle, Bell, Download } from "lucide-react";
import { ALL_TECHNICIANS } from "@/lib/mock-data";
import { ALL_COURSES } from "@/lib/courses-data";
import { useState } from "react";

export type PlannedCourse = {
  id: string;
  course_id: string;
  course_code: string;
  course_name: string;
  quarter: string;
  year: string;
  month?: string; // Month for more specific planning (1-12)
  start_date?: string; // ISO date string
  end_date?: string; // ISO date string
  technician_ids: string[];
  created_at: string;
};

interface QuarterlyTimelineProps {
  courses: PlannedCourse[];
  selectedYear?: string;
  selectedTeam?: string;
  onDeleteCourse?: (courseId: string) => void;
  onUpdateCourse?: (courseId: string, updates: Partial<PlannedCourse>) => void;
}

// Category colors matching the plan dialog
const categoryColors: Record<string, string> = {
  "Electrical Safety": "#3b82f6",
  "High Voltage": "#ef4444",
  "Mechanical": "#f97316",
  "Turbine Specific": "#8b5cf6",
  "Management": "#10b981",
  "Nordic Specific": "#06b6d4",
};

// Helper: Check if technician has overlapping courses
const hasConflict = (course: PlannedCourse, allCourses: PlannedCourse[]): boolean => {
  if (!course.start_date || !course.end_date) return false;

  return allCourses.some(otherCourse => {
    if (otherCourse.id === course.id) return false;
    if (!otherCourse.start_date || !otherCourse.end_date) return false;

    // Check if any technician is in both courses
    const sharedTechs = course.technician_ids.filter(id =>
      otherCourse.technician_ids.includes(id)
    );

    if (sharedTechs.length === 0) return false;

    // Check date overlap
    const start1 = new Date(course.start_date);
    const end1 = new Date(course.end_date);
    const start2 = new Date(otherCourse.start_date);
    const end2 = new Date(otherCourse.end_date);

    return start1 <= end2 && start2 <= end1;
  });
};

// Helper: Check capacity warning
const hasCapacityWarning = (course: PlannedCourse): boolean => {
  const courseData = ALL_COURSES.find(c => c.id === course.course_id);
  if (!courseData?.max_participants) return false;
  return course.technician_ids.length > courseData.max_participants;
};

// Helper: Get upcoming courses (within next 30 days)
const getUpcomingCourses = (courses: PlannedCourse[]): PlannedCourse[] => {
  const now = new Date();
  const thirtyDaysFromNow = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);

  return courses.filter(course => {
    if (!course.start_date) return false;
    const startDate = new Date(course.start_date);
    return startDate >= now && startDate <= thirtyDaysFromNow;
  });
};

// Helper: Export to CSV
const exportToCSV = (courses: PlannedCourse[]) => {
  const headers = ["Course Code", "Course Name", "Quarter", "Year", "Month", "Start Date", "End Date", "Technicians", "Teams"];

  const rows = courses.map(course => {
    const technicians = ALL_TECHNICIANS.filter(t => course.technician_ids.includes(t.id));
    const teams = Array.from(new Set(technicians.map(t => t.team_name))).join(", ");
    const techNames = technicians.map(t => t.initials).join(", ");

    return [
      course.course_code,
      course.course_name,
      course.quarter,
      course.year,
      course.month || "",
      course.start_date || "",
      course.end_date || "",
      techNames,
      teams
    ];
  });

  const csv = [headers, ...rows].map(row => row.map(cell => `"${cell}"`).join(",")).join("\n");
  const blob = new Blob([csv], { type: "text/csv" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `training-plan-${new Date().toISOString().split('T')[0]}.csv`;
  a.click();
  URL.revokeObjectURL(url);
};

export function QuarterlyTimeline({ courses, selectedYear = "2026", selectedTeam = "all", onDeleteCourse, onUpdateCourse }: QuarterlyTimelineProps) {
  const [deletingCourse, setDeletingCourse] = useState<string | null>(null);
  const [draggedCourse, setDraggedCourse] = useState<PlannedCourse | null>(null);
  const [dragOverQuarter, setDragOverQuarter] = useState<string | null>(null);
  const [dragOverMonth, setDragOverMonth] = useState<string | null>(null);
  const [selectedCourseInfo, setSelectedCourseInfo] = useState<PlannedCourse | null>(null);
  const [viewMode, setViewMode] = useState<"quarter" | "month" | "gantt">("quarter");
  const [showUpcomingOnly, setShowUpcomingOnly] = useState(false);

  const quarters = ["Q1", "Q2", "Q3", "Q4"];
  const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

  // Filter courses by year and team
  let filteredCourses = courses.filter(course => {
    const matchesYear = !selectedYear || course.year === selectedYear;

    if (!matchesYear) return false;

    if (selectedTeam === "all") return true;

    // Check if any technician in this course is from the selected team
    const technicians = ALL_TECHNICIANS.filter(t => course.technician_ids.includes(t.id));
    return technicians.some(t => t.team_name === selectedTeam);
  });

  // Filter for upcoming courses if enabled
  if (showUpcomingOnly) {
    filteredCourses = getUpcomingCourses(filteredCourses);
  }

  // Get upcoming courses count for notification badge
  const upcomingCoursesCount = getUpcomingCourses(filteredCourses).length;

  // Group courses by quarter
  const coursesByQuarter = quarters.map(quarter => ({
    quarter,
    courses: filteredCourses.filter(course => course.quarter === quarter)
  }));

  // Group courses by month
  const coursesByMonth = months.map((month, index) => ({
    month,
    monthNumber: index + 1,
    quarter: `Q${Math.floor(index / 3) + 1}`,
    courses: filteredCourses.filter(course => course.month === String(index + 1))
  }));

  const getQuarterColor = (quarter: string) => {
    switch (quarter) {
      case "Q1": return "bg-blue-100 border-blue-300 text-blue-900";
      case "Q2": return "bg-green-100 border-green-300 text-green-900";
      case "Q3": return "bg-yellow-100 border-yellow-300 text-yellow-900";
      case "Q4": return "bg-purple-100 border-purple-300 text-purple-900";
      default: return "bg-gray-100 border-gray-300 text-gray-900";
    }
  };

  // Drag handlers
  const handleDragStart = (e: React.DragEvent, course: PlannedCourse) => {
    setDraggedCourse(course);
    e.dataTransfer.effectAllowed = "move";
    e.dataTransfer.setData("text/html", e.currentTarget.innerHTML);
  };

  const handleDragEnd = () => {
    setDraggedCourse(null);
    setDragOverQuarter(null);
  };

  const handleDragOver = (e: React.DragEvent, quarter: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = "move";
    setDragOverQuarter(quarter);
  };

  const handleDragLeave = () => {
    setDragOverQuarter(null);
  };

  const handleDrop = (e: React.DragEvent, quarter: string, month?: string) => {
    e.preventDefault();
    if (draggedCourse && onUpdateCourse) {
      const updates: Partial<PlannedCourse> = {};

      if (quarter && draggedCourse.quarter !== quarter) {
        updates.quarter = quarter;
      }

      if (month && draggedCourse.month !== month) {
        updates.month = month;
        // Auto-update quarter based on month
        const monthNum = parseInt(month);
        updates.quarter = `Q${Math.floor((monthNum - 1) / 3) + 1}`;
      }

      if (Object.keys(updates).length > 0) {
        onUpdateCourse(draggedCourse.id, updates);
      }
    }
    setDraggedCourse(null);
    setDragOverQuarter(null);
    setDragOverMonth(null);
  };

  const handleDragOverMonth = (e: React.DragEvent, month: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = "move";
    setDragOverMonth(month);
  };

  const handleDragLeaveMonth = () => {
    setDragOverMonth(null);
  };

  // Render course card with all features
  const renderCourseCard = (course: PlannedCourse) => {
    const technicians = ALL_TECHNICIANS.filter(t =>
      course.technician_ids.includes(t.id)
    );

    const teams = Array.from(new Set(technicians.map(t => t.team_name)));
    const courseData = ALL_COURSES.find(c => c.id === course.course_id);
    const isDragging = draggedCourse?.id === course.id;

    // Check for warnings
    const conflict = hasConflict(course, filteredCourses);
    const capacityWarning = hasCapacityWarning(course);

    // Get category color
    const categoryColor = courseData ? categoryColors[courseData.category] : "#gray";

    return (
      <div key={course.id} className="relative group">
        <div
          draggable
          onDragStart={(e) => handleDragStart(e, course)}
          onDragEnd={handleDragEnd}
          className={`p-3 bg-white rounded-lg border-2 hover:shadow-md transition-all cursor-move ${isDragging ? 'opacity-50' : ''}`}
          style={{ borderLeftColor: categoryColor, borderLeftWidth: '4px' }}
        >
          <div className="flex items-start justify-between gap-2 mb-2">
            <div className="flex items-start gap-2 flex-1 min-w-0">
              <GripVertical className="h-4 w-4 text-muted-foreground mt-0.5 shrink-0" />
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 flex-wrap">
                  <p className="font-medium text-sm" title={course.course_name}>
                    {course.course_code}
                  </p>
                  {courseData && (
                    <Badge
                      variant="outline"
                      className="text-xs"
                      style={{
                        borderColor: categoryColor,
                        color: categoryColor,
                        backgroundColor: categoryColor + "10"
                      }}
                    >
                      {courseData.category}
                    </Badge>
                  )}
                </div>
                <p className="text-xs text-muted-foreground truncate">
                  {course.course_name}
                </p>
                {course.start_date && (
                  <p className="text-xs text-muted-foreground mt-1">
                    {new Date(course.start_date).toLocaleDateString()} - {course.end_date ? new Date(course.end_date).toLocaleDateString() : 'TBD'}
                  </p>
                )}
              </div>
            </div>
            <div className="flex items-center gap-1 shrink-0">
              <Badge variant="secondary" className="text-xs bg-primary text-primary-foreground">
                {course.technician_ids.length}
              </Badge>

              {/* Warnings */}
              {(conflict || capacityWarning) && (
                <div className="group/warning relative">
                  <AlertTriangle className={`h-4 w-4 ${conflict ? 'text-red-500' : 'text-yellow-500'}`} />
                  <div className="invisible group-hover/warning:visible absolute right-0 top-full pt-1 z-10">
                    <div className="w-48 rounded-lg border bg-popover p-2 text-popover-foreground shadow-lg text-xs">
                      {conflict && <p className="text-red-500">⚠️ Scheduling conflict detected</p>}
                      {capacityWarning && <p className="text-yellow-600">⚠️ Over capacity</p>}
                    </div>
                  </div>
                </div>
              )}

              {/* Info Icon */}
              <div className="group/info relative">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setSelectedCourseInfo(course);
                  }}
                  className="p-0.5 hover:bg-accent rounded transition-colors"
                >
                  <Info className="h-3.5 w-3.5 text-muted-foreground hover:text-foreground" />
                </button>
              </div>

              {onDeleteCourse && (
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-destructive/20 hover:text-destructive"
                  onClick={(e) => {
                    e.stopPropagation();
                    setDeletingCourse(course.id);
                  }}
                >
                  <X className="h-3 w-3" />
                </Button>
              )}
            </div>
          </div>
          <div className="flex flex-wrap gap-1 mt-2">
            {teams.map(team => {
              const teamData = ALL_TECHNICIANS.find(t => t.team_name === team);
              const teamTechCount = technicians.filter(t => t.team_name === team).length;

              return (
                <Badge
                  key={team}
                  variant="outline"
                  className="text-xs"
                  style={{
                    borderColor: teamData?.team_color,
                    color: teamData?.team_color,
                  }}
                >
                  {team.split(" ")[0]} ({teamTechCount})
                </Badge>
              );
            })}
          </div>
        </div>

        {/* Delete Confirmation Dialog */}
        {deletingCourse === course.id && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
            <div className="bg-background border rounded-lg p-6 shadow-xl max-w-md mx-4">
              <h3 className="text-lg font-semibold mb-2">Delete Course?</h3>
              <p className="text-sm text-muted-foreground mb-4">
                Are you sure you want to delete <strong>{course.course_code}</strong>?
                This will remove all {course.technician_ids.length} enrolled technician(s).
              </p>
              <div className="flex gap-2 justify-end">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={(e) => {
                    e.stopPropagation();
                    setDeletingCourse(null);
                  }}
                >
                  Cancel
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={(e) => {
                    e.stopPropagation();
                    if (onDeleteCourse) {
                      onDeleteCourse(course.id);
                    }
                    setDeletingCourse(null);
                  }}
                >
                  Delete Course
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {/* Header with controls */}
      <div className="flex items-center justify-between flex-wrap gap-4">
        <div className="flex items-center gap-2 text-2xl font-bold">
          <Calendar className="h-6 w-6" />
          <span>{selectedYear} Training Calendar</span>
        </div>
        <div className="flex items-center gap-2">
          {/* View Mode Switcher */}
          <div className="flex items-center gap-1 border rounded-lg p-1">
            <Button
              variant={viewMode === "quarter" ? "default" : "ghost"}
              size="sm"
              onClick={() => setViewMode("quarter")}
            >
              Quarters
            </Button>
            <Button
              variant={viewMode === "month" ? "default" : "ghost"}
              size="sm"
              onClick={() => setViewMode("month")}
            >
              Months
            </Button>
            <Button
              variant={viewMode === "gantt" ? "default" : "ghost"}
              size="sm"
              onClick={() => setViewMode("gantt")}
            >
              Gantt
            </Button>
          </div>

          {/* Upcoming Courses Toggle */}
          <Button
            variant={showUpcomingOnly ? "default" : "outline"}
            size="sm"
            onClick={() => setShowUpcomingOnly(!showUpcomingOnly)}
            className="gap-2"
          >
            <Bell className="h-4 w-4" />
            Upcoming
            {upcomingCoursesCount > 0 && (
              <Badge variant="secondary" className="ml-1">
                {upcomingCoursesCount}
              </Badge>
            )}
          </Button>

          {/* Export Button */}
          <Button
            variant="outline"
            size="sm"
            onClick={() => exportToCSV(filteredCourses)}
            className="gap-2"
          >
            <Download className="h-4 w-4" />
            Export CSV
          </Button>
        </div>
      </div>

      {/* Quarter View */}
      {viewMode === "quarter" && (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        {coursesByQuarter.map(({ quarter, courses: quarterCourses }) => {
          const totalTechnicians = quarterCourses.reduce(
            (sum, course) => sum + course.technician_ids.length,
            0
          );

          const isDraggingOver = draggedCourse && dragOverQuarter === quarter;

          return (
            <Card
              key={quarter}
              className={`border-2 ${getQuarterColor(quarter)} ${isDraggingOver ? 'ring-4 ring-primary ring-offset-2' : ''} transition-all`}
              onDragOver={(e) => handleDragOver(e, quarter)}
              onDragLeave={handleDragLeave}
              onDrop={(e) => handleDrop(e, quarter)}
            >
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg">{quarter} {selectedYear}</CardTitle>
                  <Badge variant="secondary">
                    {quarterCourses.length} {quarterCourses.length === 1 ? "course" : "courses"}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex items-center gap-2 text-sm">
                    <Users className="h-4 w-4" />
                    <span className="font-medium">{totalTechnicians} technicians</span>
                  </div>
                  <div className="space-y-2">
                    {quarterCourses.length === 0 ? (
                      <div className={`text-sm text-muted-foreground text-center py-8 rounded-lg border-2 border-dashed transition-colors ${isDraggingOver ? 'border-primary bg-primary/5' : 'border-muted'}`}>
                        {isDraggingOver ? (
                          <p className="font-medium text-primary">Drop course here</p>
                        ) : (
                          <p>No courses planned</p>
                        )}
                      </div>
                    ) : (
                      quarterCourses.map((course) => renderCourseCard(course))
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
      )}

      {/* Month View */}
      {viewMode === "month" && (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {coursesByMonth.map(({ month, monthNumber, quarter, courses: monthCourses }) => {
            const totalTechnicians = monthCourses.reduce(
              (sum, course) => sum + course.technician_ids.length,
              0
            );

            const isDraggingOver = draggedCourse && dragOverMonth === String(monthNumber);

            return (
              <Card
                key={month}
                className={`border-2 ${getQuarterColor(quarter)} ${isDraggingOver ? 'ring-4 ring-primary ring-offset-2' : ''} transition-all`}
                onDragOver={(e) => handleDragOverMonth(e, String(monthNumber))}
                onDragLeave={handleDragLeaveMonth}
                onDrop={(e) => handleDrop(e, quarter, String(monthNumber))}
              >
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-sm">{month} {selectedYear}</CardTitle>
                    <Badge variant="secondary" className="text-xs">
                      {monthCourses.length}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {monthCourses.length === 0 ? (
                      <div className={`text-xs text-muted-foreground text-center py-4 rounded-lg border-2 border-dashed transition-colors ${isDraggingOver ? 'border-primary bg-primary/5' : 'border-muted'}`}>
                        {isDraggingOver ? (
                          <p className="font-medium text-primary">Drop here</p>
                        ) : (
                          <p>No courses</p>
                        )}
                      </div>
                    ) : (
                      monthCourses.map((course) => renderCourseCard(course))
                    )}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}

      {/* Gantt View */}
      {viewMode === "gantt" && (
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-3">
              {filteredCourses.filter(c => c.start_date).length === 0 ? (
                <div className="text-center py-12">
                  <Calendar className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                  <p className="text-lg font-medium mb-2">No dated courses</p>
                  <p className="text-muted-foreground">
                    Add start and end dates to courses to see them in the Gantt view
                  </p>
                </div>
              ) : (
                filteredCourses
                  .filter(c => c.start_date)
                  .sort((a, b) => new Date(a.start_date!).getTime() - new Date(b.start_date!).getTime())
                  .map((course) => {
                    const courseData = ALL_COURSES.find(c => c.id === course.course_id);
                    const categoryColor = courseData ? categoryColors[courseData.category] : "#gray";
                    const conflict = hasConflict(course, filteredCourses);
                    const capacityWarning = hasCapacityWarning(course);

                    const startDate = new Date(course.start_date!);
                    const endDate = course.end_date ? new Date(course.end_date) : new Date(startDate.getTime() + (courseData?.duration_days || 1) * 24 * 60 * 60 * 1000);

                    const yearStart = new Date(parseInt(selectedYear), 0, 1);
                    const yearEnd = new Date(parseInt(selectedYear), 11, 31);
                    const totalDays = Math.ceil((yearEnd.getTime() - yearStart.getTime()) / (24 * 60 * 60 * 1000));
                    const startOffset = Math.max(0, Math.ceil((startDate.getTime() - yearStart.getTime()) / (24 * 60 * 60 * 1000)));
                    const duration = Math.ceil((endDate.getTime() - startDate.getTime()) / (24 * 60 * 60 * 1000));
                    const widthPercent = (duration / totalDays) * 100;
                    const leftPercent = (startOffset / totalDays) * 100;

                    return (
                      <div key={course.id} className="flex items-center gap-3">
                        <div className="w-32 flex-shrink-0 text-sm">
                          <p className="font-medium truncate">{course.course_code}</p>
                          <p className="text-xs text-muted-foreground">{course.quarter}</p>
                        </div>
                        <div className="flex-1 relative h-10 bg-muted rounded-lg">
                          <div
                            className="absolute h-full rounded-lg flex items-center px-2 text-xs font-medium text-white shadow-md hover:shadow-lg transition-shadow cursor-pointer group"
                            style={{
                              left: `${leftPercent}%`,
                              width: `${widthPercent}%`,
                              backgroundColor: categoryColor,
                              minWidth: '60px'
                            }}
                            onClick={() => setSelectedCourseInfo(course)}
                          >
                            <div className="flex items-center gap-1 w-full">
                              <span className="truncate flex-1">{course.technician_ids.length} techs</span>
                              {(conflict || capacityWarning) && (
                                <AlertTriangle className="h-3 w-3" />
                              )}
                            </div>
                          </div>
                        </div>
                        <div className="w-48 flex-shrink-0 text-xs text-muted-foreground">
                          {startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}
                        </div>
                      </div>
                    );
                  })
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Course Info Dialog */}
      <Dialog open={!!selectedCourseInfo} onOpenChange={(open) => !open && setSelectedCourseInfo(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-3">
              <div className="flex h-10 w-10 items-center justify-center rounded-full bg-primary text-primary-foreground font-bold text-lg">
                <Info className="h-5 w-5" />
              </div>
              <div>
                <p className="text-xl font-bold">{selectedCourseInfo?.course_code}</p>
                <p className="text-sm text-muted-foreground font-normal">{selectedCourseInfo?.course_name}</p>
              </div>
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4 pt-4">
            {selectedCourseInfo && (() => {
              const courseData = ALL_COURSES.find(c => c.id === selectedCourseInfo.course_id);
              const technicians = ALL_TECHNICIANS.filter(t => selectedCourseInfo.technician_ids.includes(t.id));
              const teams = Array.from(new Set(technicians.map(t => t.team_name)));

              return (
                <>
                  {/* Course Details */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <h4 className="text-sm font-semibold mb-1">Quarter</h4>
                      <Badge className="text-sm">{selectedCourseInfo.quarter} {selectedCourseInfo.year}</Badge>
                    </div>
                    <div>
                      <h4 className="text-sm font-semibold mb-1">Enrolled Technicians</h4>
                      <p className="text-sm text-muted-foreground">{selectedCourseInfo.technician_ids.length} technicians</p>
                    </div>
                  </div>

                  {courseData && (
                    <div className="bg-muted/50 rounded-lg p-4 space-y-2">
                      <h4 className="text-sm font-semibold">Course Information</h4>
                      <div className="grid grid-cols-2 gap-3 text-sm">
                        <div>
                          <span className="text-muted-foreground">Duration:</span>
                          <span className="ml-2 font-medium">{courseData.duration_days} days</span>
                        </div>
                        <div>
                          <span className="text-muted-foreground">Provider:</span>
                          <span className="ml-2 font-medium">{courseData.provider}</span>
                        </div>
                        <div>
                          <span className="text-muted-foreground">Category:</span>
                          <span className="ml-2 font-medium">{courseData.category}</span>
                        </div>
                        {courseData.max_participants && (
                          <div>
                            <span className="text-muted-foreground">Max participants:</span>
                            <span className="ml-2 font-medium">{courseData.max_participants}</span>
                          </div>
                        )}
                      </div>
                      <div className="pt-2">
                        <p className="text-sm text-muted-foreground">{courseData.description}</p>
                      </div>
                    </div>
                  )}

                  {/* Teams */}
                  <div>
                    <h4 className="text-sm font-semibold mb-2">Teams Enrolled</h4>
                    <div className="flex flex-wrap gap-2">
                      {teams.map(team => {
                        const teamData = ALL_TECHNICIANS.find(t => t.team_name === team);
                        const teamTechCount = technicians.filter(t => t.team_name === team).length;

                        return (
                          <Badge
                            key={team}
                            variant="outline"
                            className="text-sm"
                            style={{
                              borderColor: teamData?.team_color,
                              color: teamData?.team_color,
                            }}
                          >
                            {team} ({teamTechCount})
                          </Badge>
                        );
                      })}
                    </div>
                  </div>

                  {/* Technicians List */}
                  <div>
                    <h4 className="text-sm font-semibold mb-2">Enrolled Technicians</h4>
                    <div className="flex flex-wrap gap-2">
                      {technicians.map(tech => (
                        <Badge
                          key={tech.id}
                          variant="secondary"
                          style={{
                            backgroundColor: tech.team_color + "20",
                            color: tech.team_color,
                          }}
                        >
                          {tech.initials}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </>
              );
            })()}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
